// Copyright 2008 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.enterprise.secmgr.ulf;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;
import com.google.enterprise.secmgr.common.HttpUtil.FormParameterCodingException;

import java.io.IOException;

import java.io.Serializable;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.Immutable;
import javax.servlet.http.HttpServletRequest;

/**
 * This class implements the universal login form processing logic.  Its primary job is to
 * translate the user input into valid CredentialGroups.
 *
 * The universal login form is also the class that contains the state of the user's login
 * session.
 */
@Immutable
@ParametersAreNonnullByDefault
public class UniversalLoginForm implements Serializable {

  @Nonnull private final ImmutableList<FormElement> formElements;
  @Nonnull private final UniversalLoginFormHtml formHtml;

  /**
   * TODO: ideally instead of UniversalLoginFormHtml we would
   * pass in a UI interface.  I haven't figured out the right way to do so and
   * keep the generate/submit methods consistent for all UI implementations.
   * Perhaps we must restrict UI implementations to ones that can be returned as
   * HTTP content.
   */
  private UniversalLoginForm(ImmutableList<FormElement> formElements,
      UniversalLoginFormHtml formHtml) {
    this.formElements = formElements;
    this.formHtml = formHtml;
  }

  /**
   * Gets a new instance.
   *
   * @param formElements The elements that the form should contain.
   * @param formHtml The HTML renderer for the form.
   * @return A new form instance.
   */
  @Nonnull
  public static UniversalLoginForm make(Iterable<FormElement> formElements,
      UniversalLoginFormHtml formHtml) {
    Preconditions.checkNotNull(formElements);
    Preconditions.checkNotNull(formHtml);
    return new UniversalLoginForm(ImmutableList.copyOf(formElements), formHtml);
  }

  /**
   * Generates a login form that reflects the current state of this universal
   * login form.
   *
   * @param errorMsg An error message to display on the form, or null for none.
   * @return An HTML string with the login-form page.
   */
  @Nonnull
  public String generateForm(@Nullable String errorMsg)
      throws IOException {
    return formHtml.generateForm(formElements, errorMsg);
  }

  /**
   * Handles a submit of a universal login form (a POST).  Parses the POST
   * parameters and returns the parsed results.
   *
   * <p>This method assumes that the provided request is a POST of a form
   * generated by the same instance of this class.
   *
   * @param request The incoming submission.
   * @param sessionId The ID of the session this submit is for.
   * @return An immutable list of form-response elements.
   * @throws FormParameterCodingException if the request body can't be parsed.
   */
  @Nonnull
  public ImmutableList<FormResponse> handleFormSubmit(HttpServletRequest request,
      String sessionId)
      throws FormParameterCodingException, IOException {
    return ImmutableList.copyOf(formHtml.parsePostedForm(request, sessionId, formElements));
  }
}
